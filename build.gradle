plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = '1.19.3-0.0.1-FORGE'
group = 'nc'
archivesBaseName = 'NuclearCraft'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: "${mapping_channel}", version: "${mapping_version}"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'nuclearcraft'

            mods {
                nuclearcraft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'nuclearcraft'

            mods {
                nuclearcraft {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'nuclearcraft'

            mods {
                nuclearcraft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'nuclearcraft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                nuclearcraft {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "progwml6"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "blamejared"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))
    compileOnly(fg.deobf("com.teamcofh:cofh_core:${cofh_core_version}")) {
        transitive = false
    }
    compileOnly(fg.deobf("codechicken:CodeChickenLib:${ccl_version}:universal"))
    compileOnly(fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-${mc_version}:${crafttweaker_version}"))
    compileOnly(fg.deobf("mekanism:Mekanism:${mekanism_version}"))
    compileOnly(fg.deobf("curse.maven:projecte-226410:${projecte_version}"))
    compileOnly(fg.deobf("net.darkhax.bookshelf:Bookshelf-Forge-${mc_version}:${bookshelf_version}"))
    compileOnly(fg.deobf("net.darkhax.gamestages:GameStages-Forge-${mc_version}:${gamestages_version}"))
    compileOnly(fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}"))
    compileOnly(fg.deobf("curse.maven:theoneprobe-245211:${top_version}"))
    compileOnly(fg.deobf("curse.maven:jade-324717:${jade_version}"))
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "NuclearCraft: Overhauled",
                "Specification-Vendor"    : "Colonova",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Colonova",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}